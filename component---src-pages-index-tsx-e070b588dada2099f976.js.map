{"version":3,"file":"component---src-pages-index-tsx-e070b588dada2099f976.js","mappings":"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","sources":["webpack://escemi-website/./node_modules/camelcase/index.js","webpack://escemi-website/../src/image-utils.ts","webpack://escemi-website/../src/components/hooks.ts","webpack://escemi-website/../src/components/picture.tsx","webpack://escemi-website/../src/components/layout-wrapper.tsx","webpack://escemi-website/../src/components/placeholder.tsx","webpack://escemi-website/../src/components/main-image.tsx","webpack://escemi-website/../src/components/gatsby-image.browser.tsx","webpack://escemi-website/../src/components/gatsby-image.server.tsx","webpack://escemi-website/../src/components/static-image.server.tsx","webpack://escemi-website/../src/components/static-image.tsx","webpack://escemi-website/./src/components/config/useSocialLinks.tsx","webpack://escemi-website/./src/components/skills/Skills.tsx","webpack://escemi-website/./src/components/skills/useSkillItems.tsx","webpack://escemi-website/./src/components/social-icon/SocialIcon.tsx","webpack://escemi-website/./src/components/about/About.tsx","webpack://escemi-website/./src/components/contact/Contact.tsx","webpack://escemi-website/./src/components/config/useContactFormUrl.tsx","webpack://escemi-website/./src/components/footer/Footer.tsx","webpack://escemi-website/./src/components/masthead/Masthead.tsx","webpack://escemi-website/./src/components/open-source/OpenSource.tsx","webpack://escemi-website/./src/components/portfolio/Portfolio.tsx","webpack://escemi-website/./src/components/portfolio/usePortfolioItems.tsx","webpack://escemi-website/./src/components/scroll-to-top/ScrollToTop.tsx","webpack://escemi-website/./src/components/services/Services.tsx","webpack://escemi-website/./src/pages/index.tsx"],"sourcesContent":["'use strict';\n\nvar preserveCamelCase = function preserveCamelCase(string) {\n  var isLastCharLower = false;\n  var isLastCharUpper = false;\n  var isLastLastCharUpper = false;\n\n  for (var i = 0; i < string.length; i++) {\n    var character = string[i];\n\n    if (isLastCharLower && /[a-zA-Z]/.test(character) && character.toUpperCase() === character) {\n      string = string.slice(0, i) + '-' + string.slice(i);\n      isLastCharLower = false;\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = true;\n      i++;\n    } else if (isLastCharUpper && isLastLastCharUpper && /[a-zA-Z]/.test(character) && character.toLowerCase() === character) {\n      string = string.slice(0, i - 1) + '-' + string.slice(i - 1);\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = false;\n      isLastCharLower = true;\n    } else {\n      isLastCharLower = character.toLowerCase() === character && character.toUpperCase() !== character;\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = character.toUpperCase() === character && character.toLowerCase() !== character;\n    }\n  }\n\n  return string;\n};\n\nvar camelCase = function camelCase(input, options) {\n  if (!(typeof input === 'string' || Array.isArray(input))) {\n    throw new TypeError('Expected the input to be `string | string[]`');\n  }\n\n  options = Object.assign({\n    pascalCase: false\n  }, options);\n\n  var postProcess = function postProcess(x) {\n    return options.pascalCase ? x.charAt(0).toUpperCase() + x.slice(1) : x;\n  };\n\n  if (Array.isArray(input)) {\n    input = input.map(function (x) {\n      return x.trim();\n    }).filter(function (x) {\n      return x.length;\n    }).join('-');\n  } else {\n    input = input.trim();\n  }\n\n  if (input.length === 0) {\n    return '';\n  }\n\n  if (input.length === 1) {\n    return options.pascalCase ? input.toUpperCase() : input.toLowerCase();\n  }\n\n  var hasUpperCase = input !== input.toLowerCase();\n\n  if (hasUpperCase) {\n    input = preserveCamelCase(input);\n  }\n\n  input = input.replace(/^[_.\\- ]+/, '').toLowerCase().replace(/[_.\\- ]+(\\w|$)/g, function (_, p1) {\n    return p1.toUpperCase();\n  }).replace(/\\d+(\\w|$)/g, function (m) {\n    return m.toUpperCase();\n  });\n  return postProcess(input);\n};\n\nmodule.exports = camelCase; // TODO: Remove this for the next major release\n\nmodule.exports.default = camelCase;","import camelCase from \"camelcase\"\nimport type { IGatsbyImageData } from \"./index\"\n\nconst DEFAULT_PIXEL_DENSITIES = [0.25, 0.5, 1, 2]\nexport const DEFAULT_BREAKPOINTS = [750, 1080, 1366, 1920]\nexport const EVERY_BREAKPOINT = [\n  320, 654, 768, 1024, 1366, 1600, 1920, 2048, 2560, 3440, 3840, 4096,\n]\nconst DEFAULT_FLUID_WIDTH = 800\nconst DEFAULT_FIXED_WIDTH = 800\nconst DEFAULT_ASPECT_RATIO = 4 / 3\n\nexport type Fit = \"cover\" | \"fill\" | \"inside\" | \"outside\" | \"contain\"\n\nexport type Layout = \"fixed\" | \"fullWidth\" | \"constrained\"\nexport type ImageFormat = \"jpg\" | \"png\" | \"webp\" | \"avif\" | \"auto\" | \"\"\n\n/**\n * The minimal required reporter, as we don't want to import it from gatsby-cli\n */\nexport interface IReporter {\n  warn(message: string): void\n}\n\nexport interface ISharpGatsbyImageArgs {\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  placeholder?: \"tracedSVG\" | \"dominantColor\" | \"blurred\" | \"none\"\n  tracedSVGOptions?: Record<string, unknown>\n  width?: number\n  height?: number\n  aspectRatio?: number\n  sizes?: string\n  quality?: number\n  transformOptions?: {\n    fit?: Fit\n    cropFocus?: number | string\n    duotone?: {\n      highlight: string\n      shadow: string\n      opacity?: number\n    }\n    grayscale?: boolean\n    rotate?: number\n    trim?: number\n  }\n  jpgOptions?: Record<string, unknown>\n  pngOptions?: Record<string, unknown>\n  webpOptions?: Record<string, unknown>\n  avifOptions?: Record<string, unknown>\n  blurredOptions?: { width?: number; toFormat?: ImageFormat }\n  breakpoints?: Array<number>\n  outputPixelDensities?: Array<number>\n  backgroundColor?: string\n}\n\nexport interface IImageSizeArgs {\n  width?: number\n  height?: number\n  layout?: Layout\n  filename: string\n  outputPixelDensities?: Array<number>\n  breakpoints?: Array<number>\n  fit?: Fit\n  reporter?: IReporter\n  sourceMetadata: { width: number; height: number }\n}\n\nexport interface IImageSizes {\n  sizes: Array<number>\n  presentationWidth: number\n  presentationHeight: number\n  aspectRatio: number\n  unscaledWidth: number\n}\n\nexport interface IImage {\n  src: string\n  width: number\n  height: number\n  format: ImageFormat\n}\n\nexport interface IGatsbyImageHelperArgs {\n  pluginName: string\n  generateImageSource: (\n    filename: string,\n    width: number,\n    height: number,\n    format: ImageFormat,\n    fit?: Fit,\n    options?: Record<string, unknown>\n  ) => IImage\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  filename: string\n  placeholderURL?: string\n  width?: number\n  height?: number\n  sizes?: string\n  reporter?: IReporter\n  sourceMetadata?: { width: number; height: number; format: ImageFormat }\n  fit?: Fit\n  options?: Record<string, unknown>\n  breakpoints?: Array<number>\n  backgroundColor?: string\n  aspectRatio?: number\n}\n\nconst warn = (message: string): void => console.warn(message)\n\nconst sortNumeric = (a: number, b: number): number => a - b\n\nexport const getSizes = (width: number, layout: Layout): string | undefined => {\n  switch (layout) {\n    // If screen is wider than the max size, image width is the max size,\n    // otherwise it's the width of the screen\n    case `constrained`:\n      return `(min-width: ${width}px) ${width}px, 100vw`\n\n    // Image is always the same width, whatever the size of the screen\n    case `fixed`:\n      return `${width}px`\n\n    // Image is always the width of the screen\n    case `fullWidth`:\n      return `100vw`\n\n    default:\n      return undefined\n  }\n}\n\nexport const getSrcSet = (images: Array<IImage>): string =>\n  images.map(image => `${image.src} ${image.width}w`).join(`,\\n`)\n\nexport function formatFromFilename(filename: string): ImageFormat | undefined {\n  const dot = filename.lastIndexOf(`.`)\n  if (dot !== -1) {\n    const ext = filename.slice(dot + 1)\n    if (ext === `jpeg`) {\n      return `jpg`\n    }\n    if (ext.length === 3 || ext.length === 4) {\n      return ext as ImageFormat\n    }\n  }\n  return undefined\n}\n\nexport function setDefaultDimensions(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageHelperArgs {\n  let {\n    layout = `constrained`,\n    width,\n    height,\n    sourceMetadata,\n    breakpoints,\n    aspectRatio,\n    formats = [`auto`, `webp`],\n  } = args\n  formats = formats.map(format => format.toLowerCase() as ImageFormat)\n  layout = camelCase(layout) as Layout\n\n  if (width && height) {\n    return { ...args, formats, layout, aspectRatio: width / height }\n  }\n  if (sourceMetadata.width && sourceMetadata.height && !aspectRatio) {\n    aspectRatio = sourceMetadata.width / sourceMetadata.height\n  }\n\n  if (layout === `fullWidth`) {\n    width = width || sourceMetadata.width || breakpoints[breakpoints.length - 1]\n    height = height || Math.round(width / (aspectRatio || DEFAULT_ASPECT_RATIO))\n  } else {\n    if (!width) {\n      if (height && aspectRatio) {\n        width = height * aspectRatio\n      } else if (sourceMetadata.width) {\n        width = sourceMetadata.width\n      } else if (height) {\n        width = Math.round(height / DEFAULT_ASPECT_RATIO)\n      } else {\n        width = DEFAULT_FIXED_WIDTH\n      }\n    }\n\n    if (aspectRatio && !height) {\n      height = Math.round(width / aspectRatio)\n    } else if (!aspectRatio) {\n      aspectRatio = width / height\n    }\n  }\n  return { ...args, width, height, aspectRatio, layout, formats }\n}\n\n/**\n * Use this for getting an image for the blurred placeholder. This ensures the\n * aspect ratio and crop match the main image\n */\nexport function getLowResolutionImageURL(\n  args: IGatsbyImageHelperArgs,\n  width = 20\n): string {\n  args = setDefaultDimensions(args)\n  const { generateImageSource, filename, aspectRatio } = args\n  return generateImageSource(\n    filename,\n    width,\n    Math.round(width / aspectRatio),\n    args.sourceMetadata.format || `jpg`,\n    args.fit,\n    args.options\n  )?.src\n}\n\nexport function generateImageData(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageData {\n  args = setDefaultDimensions(args)\n\n  let {\n    pluginName,\n    sourceMetadata,\n    generateImageSource,\n    layout,\n    fit,\n    options,\n    width,\n    height,\n    filename,\n    reporter = { warn },\n    backgroundColor,\n    placeholderURL,\n  } = args\n\n  if (!pluginName) {\n    reporter.warn(\n      `[gatsby-plugin-image] \"generateImageData\" was not passed a plugin name`\n    )\n  }\n\n  if (typeof generateImageSource !== `function`) {\n    throw new Error(`generateImageSource must be a function`)\n  }\n\n  if (!sourceMetadata || (!sourceMetadata.width && !sourceMetadata.height)) {\n    // No metadata means we let the CDN handle max size etc, aspect ratio etc\n    sourceMetadata = {\n      width,\n      height,\n      format: sourceMetadata?.format || formatFromFilename(filename) || `auto`,\n    }\n  } else if (!sourceMetadata.format) {\n    sourceMetadata.format = formatFromFilename(filename)\n  }\n\n  const formats = new Set<ImageFormat>(args.formats)\n\n  if (formats.size === 0 || formats.has(`auto`) || formats.has(``)) {\n    formats.delete(`auto`)\n    formats.delete(``)\n    formats.add(sourceMetadata.format)\n  }\n\n  if (formats.has(`jpg`) && formats.has(`png`)) {\n    reporter.warn(\n      `[${pluginName}] Specifying both 'jpg' and 'png' formats is not supported. Using 'auto' instead`\n    )\n    if (sourceMetadata.format === `jpg`) {\n      formats.delete(`png`)\n    } else {\n      formats.delete(`jpg`)\n    }\n  }\n\n  const imageSizes = calculateImageSizes({ ...args, sourceMetadata })\n\n  const result: IGatsbyImageData[\"images\"] = {\n    sources: [],\n  }\n\n  let sizes = args.sizes\n  if (!sizes) {\n    sizes = getSizes(imageSizes.presentationWidth, layout)\n  }\n\n  formats.forEach(format => {\n    const images = imageSizes.sizes\n      .map(size => {\n        const imageSrc = generateImageSource(\n          filename,\n          size,\n          Math.round(size / imageSizes.aspectRatio),\n          format,\n          fit,\n          options\n        )\n        if (\n          !imageSrc?.width ||\n          !imageSrc.height ||\n          !imageSrc.src ||\n          !imageSrc.format\n        ) {\n          reporter.warn(\n            `[${pluginName}] The resolver for image ${filename} returned an invalid value.`\n          )\n          return undefined\n        }\n        return imageSrc\n      })\n      .filter(Boolean)\n\n    if (format === `jpg` || format === `png` || format === `auto`) {\n      const unscaled =\n        images.find(img => img.width === imageSizes.unscaledWidth) || images[0]\n\n      if (unscaled) {\n        result.fallback = {\n          src: unscaled.src,\n          srcSet: getSrcSet(images),\n          sizes,\n        }\n      }\n    } else {\n      result.sources?.push({\n        srcSet: getSrcSet(images),\n        sizes,\n        type: `image/${format}`,\n      })\n    }\n  })\n\n  const imageProps: Partial<IGatsbyImageData> = {\n    images: result,\n    layout,\n    backgroundColor,\n  }\n\n  if (placeholderURL) {\n    imageProps.placeholder = { fallback: placeholderURL }\n  }\n\n  switch (layout) {\n    case `fixed`:\n      imageProps.width = imageSizes.presentationWidth\n      imageProps.height = imageSizes.presentationHeight\n      break\n\n    case `fullWidth`:\n      imageProps.width = 1\n      imageProps.height = 1 / imageSizes.aspectRatio\n      break\n\n    case `constrained`:\n      imageProps.width = args.width || imageSizes.presentationWidth || 1\n      imageProps.height = (imageProps.width || 1) / imageSizes.aspectRatio\n  }\n\n  return imageProps as IGatsbyImageData\n}\n\nconst dedupeAndSortDensities = (values: Array<number>): Array<number> =>\n  Array.from(new Set([1, ...values])).sort(sortNumeric)\n\nexport function calculateImageSizes(args: IImageSizeArgs): IImageSizes {\n  const {\n    width,\n    height,\n    filename,\n    layout = `constrained`,\n    sourceMetadata: imgDimensions,\n    reporter = { warn },\n    breakpoints = DEFAULT_BREAKPOINTS,\n  } = args\n\n  // check that all dimensions provided are positive\n  const userDimensions = { width, height }\n  const erroneousUserDimensions = Object.entries(userDimensions).filter(\n    ([_, size]) => typeof size === `number` && size < 1\n  )\n  if (erroneousUserDimensions.length) {\n    throw new Error(\n      `Specified dimensions for images must be positive numbers (> 0). Problem dimensions you have are ${erroneousUserDimensions\n        .map(dim => dim.join(`: `))\n        .join(`, `)}`\n    )\n  }\n\n  if (layout === `fixed`) {\n    return fixedImageSizes(args)\n  } else if (layout === `constrained`) {\n    return responsiveImageSizes(args)\n  } else if (layout === `fullWidth`) {\n    return responsiveImageSizes({ breakpoints, ...args })\n  } else {\n    reporter.warn(\n      `No valid layout was provided for the image at ${filename}. Valid image layouts are fixed, fullWidth, and constrained. Found ${layout}`\n    )\n    return {\n      sizes: [imgDimensions.width],\n      presentationWidth: imgDimensions.width,\n      presentationHeight: imgDimensions.height,\n      aspectRatio: imgDimensions.width / imgDimensions.height,\n      unscaledWidth: imgDimensions.width,\n    }\n  }\n}\nexport function fixedImageSizes({\n  filename,\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  reporter = { warn },\n}: IImageSizeArgs): IImageSizes {\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  if (!width) {\n    if (!height) {\n      width = DEFAULT_FIXED_WIDTH\n    } else {\n      width = Math.round(height * aspectRatio)\n    }\n  } else if (!height) {\n    height = Math.round(width / aspectRatio)\n  }\n\n  const originalWidth = width // will use this for presentationWidth, don't want to lose it\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n\n  // If the image is smaller than requested, warn the user that it's being processed as such\n  // print out this message with the necessary information before we overwrite it for sizing\n  if (isTopSizeOverriden) {\n    const fixedDimension = imgDimensions.width < width ? `width` : `height`\n    reporter.warn(`\nThe requested ${fixedDimension} \"${\n      fixedDimension === `width` ? width : height\n    }px\" for the image ${filename} was larger than the actual image ${fixedDimension} of ${\n      imgDimensions[fixedDimension]\n    }px. If possible, replace the current image with a larger one.`)\n\n    if (fixedDimension === `width`) {\n      width = imgDimensions.width\n      height = Math.round(width / aspectRatio)\n    } else {\n      height = imgDimensions.height\n      width = height * aspectRatio\n    }\n  }\n\n  const sizes = densities\n    .filter(size => size >= 1) // remove smaller densities because fixed images don't need them\n    .map(density => Math.round(density * (width as number)))\n    .filter(size => size <= imgDimensions.width)\n\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function responsiveImageSizes({\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  breakpoints,\n  layout,\n}: IImageSizeArgs): IImageSizes {\n  let sizes\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  // Case 1: width of height were passed in, make sure it isn't larger than the actual image\n  width = width && Math.min(width, imgDimensions.width)\n  height = height && Math.min(height, imgDimensions.height)\n\n  // Case 2: neither width or height were passed in, use default size\n  if (!width && !height) {\n    width = Math.min(DEFAULT_FLUID_WIDTH, imgDimensions.width)\n    height = width / aspectRatio\n  }\n\n  // if it still hasn't been found, calculate width from the derived height.\n  // TS isn't smart enough to realise the type for height has been narrowed here\n  if (!width) {\n    width = (height as number) * aspectRatio\n  }\n\n  const originalWidth = width\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n  if (isTopSizeOverriden) {\n    width = imgDimensions.width\n    height = imgDimensions.height\n  }\n\n  width = Math.round(width)\n\n  if (breakpoints?.length > 0) {\n    sizes = breakpoints.filter(size => size <= imgDimensions.width)\n\n    // If a larger breakpoint has been filtered-out, add the actual image width instead\n    if (\n      sizes.length < breakpoints.length &&\n      !sizes.includes(imgDimensions.width)\n    ) {\n      sizes.push(imgDimensions.width)\n    }\n  } else {\n    sizes = densities.map(density => Math.round(density * (width as number)))\n    sizes = sizes.filter(size => size <= imgDimensions.width)\n  }\n\n  // ensure that the size passed in is included in the final output\n  if (layout === `constrained` && !sizes.includes(width)) {\n    sizes.push(width)\n  }\n  sizes = sizes.sort(sortNumeric)\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function getDimensionsAndAspectRatio(\n  dimensions,\n  options\n): { width: number; height: number; aspectRatio: number } {\n  // Calculate the eventual width/height of the image.\n  const imageAspectRatio = dimensions.width / dimensions.height\n\n  let width = options.width\n  let height = options.height\n\n  switch (options.fit) {\n    case `fill`: {\n      width = options.width ? options.width : dimensions.width\n      height = options.height ? options.height : dimensions.height\n      break\n    }\n    case `inside`: {\n      const widthOption = options.width\n        ? options.width\n        : Number.MAX_SAFE_INTEGER\n      const heightOption = options.height\n        ? options.height\n        : Number.MAX_SAFE_INTEGER\n\n      width = Math.min(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.min(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n    case `outside`: {\n      const widthOption = options.width ? options.width : 0\n      const heightOption = options.height ? options.height : 0\n\n      width = Math.max(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.max(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n\n    default: {\n      if (options.width && !options.height) {\n        width = options.width\n        height = Math.round(options.width / imageAspectRatio)\n      }\n\n      if (options.height && !options.width) {\n        width = Math.round(options.height * imageAspectRatio)\n        height = options.height\n      }\n    }\n  }\n\n  return {\n    width,\n    height,\n    aspectRatio: width / height,\n  }\n}\n","/* global GATSBY___IMAGE */\nimport { generateImageData, EVERY_BREAKPOINT } from \"../image-utils\"\nimport type { CSSProperties, HTMLAttributes, ImgHTMLAttributes } from \"react\"\nimport type { Node } from \"gatsby\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { IGatsbyImageData } from \"./gatsby-image.browser\"\nimport type {\n  IGatsbyImageHelperArgs,\n  Layout,\n  IImage,\n  ImageFormat,\n} from \"../image-utils\"\n\n// Native lazy-loading support: https://addyosmani.com/blog/lazy-loading/\nexport const hasNativeLazyLoadSupport = (): boolean =>\n  typeof HTMLImageElement !== `undefined` &&\n  `loading` in HTMLImageElement.prototype\n\nexport function gatsbyImageIsInstalled(): boolean {\n  return typeof GATSBY___IMAGE !== `undefined` && GATSBY___IMAGE\n}\n\nexport type IGatsbyImageDataParent<T = never> = T & {\n  gatsbyImageData: IGatsbyImageData\n}\nexport type IGatsbyImageParent<T = never> = T & {\n  gatsbyImage: IGatsbyImageData\n}\nexport type FileNode = Partial<Node> & {\n  childImageSharp?: IGatsbyImageDataParent<Partial<Node>>\n}\n\nconst isGatsbyImageData = (\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageData | any\n): node is IGatsbyImageData =>\n  // 🦆 check for a deep prop to be sure this is a valid gatsbyImageData object\n  Boolean(node?.images?.fallback?.src)\n\nconst isGatsbyImageDataParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageDataParent<T> | any\n): node is IGatsbyImageDataParent<T> => Boolean(node?.gatsbyImageData)\n\nconst isGatsbyImageParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageParent<T> | any\n): node is IGatsbyImageParent<T> => Boolean(node?.gatsbyImage)\n\nexport type ImageDataLike =\n  | FileNode\n  | IGatsbyImageDataParent\n  | IGatsbyImageParent\n  | IGatsbyImageData\n\nexport const getImage = (\n  node: ImageDataLike | null\n): IGatsbyImageData | undefined => {\n  // This checks both for gatsbyImageData and gatsbyImage\n  if (isGatsbyImageData(node)) {\n    return node\n  }\n  // gatsbyImageData GraphQL field\n  if (isGatsbyImageDataParent(node)) {\n    return node.gatsbyImageData\n  }\n  // gatsbyImage GraphQL field for Gatsby's Image CDN service\n  if (isGatsbyImageParent(node)) {\n    return node.gatsbyImage\n  }\n  return node?.childImageSharp?.gatsbyImageData\n}\n\nexport const getSrc = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.src\n\nexport const getSrcSet = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.srcSet\n\nexport function getWrapperProps(\n  width: number,\n  height: number,\n  layout: Layout\n): Pick<HTMLAttributes<HTMLElement>, \"className\" | \"style\"> & {\n  \"data-gatsby-image-wrapper\": string\n} {\n  const wrapperStyle: CSSProperties = {}\n\n  let className = `gatsby-image-wrapper`\n\n  // If the plugin isn't installed we need to apply the styles inline\n  if (!gatsbyImageIsInstalled()) {\n    wrapperStyle.position = `relative`\n    wrapperStyle.overflow = `hidden`\n  }\n\n  if (layout === `fixed`) {\n    wrapperStyle.width = width\n    wrapperStyle.height = height\n  } else if (layout === `constrained`) {\n    if (!gatsbyImageIsInstalled()) {\n      wrapperStyle.display = `inline-block`\n      wrapperStyle.verticalAlign = `top`\n    }\n    className = `gatsby-image-wrapper gatsby-image-wrapper-constrained`\n  }\n\n  return {\n    className,\n    \"data-gatsby-image-wrapper\": ``,\n    style: wrapperStyle,\n  }\n}\n\nexport interface IUrlBuilderArgs<OptionsType> {\n  width: number\n  height: number\n  baseUrl: string\n  format: ImageFormat\n  options: OptionsType\n}\nexport interface IGetImageDataArgs<OptionsType = Record<string, unknown>> {\n  baseUrl: string\n  /**\n   * For constrained and fixed images, the size of the image element\n   */\n  width?: number\n  height?: number\n  /**\n   * If available, pass the source image width and height\n   */\n  sourceWidth?: number\n  sourceHeight?: number\n  /**\n   * If only one dimension is passed, then this will be used to calculate the other.\n   */\n  aspectRatio?: number\n  layout?: Layout\n  /**\n   * Returns a URL based on the passed arguments. Should be a pure function\n   */\n  urlBuilder: (args: IUrlBuilderArgs<OptionsType>) => string\n\n  /**\n   * Should be a data URI\n   */\n  placeholderURL?: string\n  backgroundColor?: string\n  /**\n   * Used in error messages etc\n   */\n  pluginName?: string\n\n  /**\n   * If you do not support auto-format, pass an array of image types here\n   */\n  formats?: Array<ImageFormat>\n\n  breakpoints?: Array<number>\n\n  /**\n   * Passed to the urlBuilder function\n   */\n  options?: OptionsType\n}\n\n/**\n * Use this hook to generate gatsby-plugin-image data in the browser.\n */\nexport function getImageData<OptionsType>({\n  baseUrl,\n  urlBuilder,\n  sourceWidth,\n  sourceHeight,\n  pluginName = `getImageData`,\n  formats = [`auto`],\n  breakpoints,\n  options,\n  ...props\n}: IGetImageDataArgs<OptionsType>): IGatsbyImageData {\n  if (\n    !breakpoints?.length &&\n    (props.layout === `fullWidth` || (props.layout as string) === `FULL_WIDTH`)\n  ) {\n    breakpoints = EVERY_BREAKPOINT\n  }\n  const generateImageSource = (\n    baseUrl: string,\n    width: number,\n    height?: number,\n    format?: ImageFormat\n  ): IImage => {\n    return {\n      width,\n      height,\n      format,\n      src: urlBuilder({ baseUrl, width, height, options, format }),\n    }\n  }\n\n  const sourceMetadata: IGatsbyImageHelperArgs[\"sourceMetadata\"] = {\n    width: sourceWidth,\n    height: sourceHeight,\n    format: `auto`,\n  }\n\n  const args: IGatsbyImageHelperArgs = {\n    ...props,\n    pluginName,\n    generateImageSource,\n    filename: baseUrl,\n    formats,\n    breakpoints,\n    sourceMetadata,\n  }\n  return generateImageData(args)\n}\n\nexport function getMainProps(\n  isLoading: boolean,\n  isLoaded: boolean,\n  images: IGatsbyImageData[\"images\"],\n  loading?: \"eager\" | \"lazy\",\n  style: CSSProperties = {}\n): Partial<MainImageProps> {\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      transform: `translateZ(0)`,\n      transition: `opacity 250ms linear`,\n      width: `100%`,\n      willChange: `opacity`,\n      ...style,\n    }\n  }\n\n  const result = {\n    ...images,\n    loading,\n    shouldLoad: isLoading,\n    \"data-main-image\": ``,\n    style: {\n      ...style,\n      opacity: isLoaded ? 1 : 0,\n    },\n  }\n\n  return result\n}\n\nexport type PlaceholderImageAttrs = ImgHTMLAttributes<HTMLImageElement> &\n  Pick<PlaceholderProps, \"sources\" | \"fallback\"> & {\n    \"data-placeholder-image\"?: string\n  }\n\nexport function getPlaceholderProps(\n  placeholder: PlaceholderImageAttrs | undefined,\n  isLoaded: boolean,\n  layout: Layout,\n  width?: number,\n  height?: number,\n  backgroundColor?: string,\n  objectFit?: CSSProperties[\"objectFit\"],\n  objectPosition?: CSSProperties[\"objectPosition\"]\n): PlaceholderImageAttrs {\n  const wrapperStyle: CSSProperties = {}\n\n  if (backgroundColor) {\n    wrapperStyle.backgroundColor = backgroundColor\n\n    if (layout === `fixed`) {\n      wrapperStyle.width = width\n      wrapperStyle.height = height\n      wrapperStyle.backgroundColor = backgroundColor\n      wrapperStyle.position = `relative`\n    } else if (layout === `constrained`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    } else if (layout === `fullWidth`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    }\n  }\n\n  if (objectFit) {\n    wrapperStyle.objectFit = objectFit\n  }\n\n  if (objectPosition) {\n    wrapperStyle.objectPosition = objectPosition\n  }\n  const result: PlaceholderImageAttrs = {\n    ...placeholder,\n    \"aria-hidden\": true,\n    \"data-placeholder-image\": ``,\n    style: {\n      opacity: isLoaded ? 0 : 1,\n      transition: `opacity 500ms linear`,\n      ...wrapperStyle,\n    },\n  }\n\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    result.style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      width: `100%`,\n    }\n  }\n\n  return result\n}\n\nexport interface IArtDirectedImage {\n  media: string\n  image: IGatsbyImageData\n}\n\n/**\n * Generate a Gatsby image data object with multiple, art-directed images that display at different\n * resolutions.\n *\n * @param defaultImage The image displayed when no media query matches.\n * It is also used for all other settings applied to the image, such as width, height and layout.\n * You should pass a className to the component with media queries to adjust the size of the container,\n * as this cannot be adjusted automatically.\n * @param artDirected Array of objects which each contains a `media` string which is a media query\n * such as `(min-width: 320px)`, and the image object to use when that query matches.\n */\nexport function withArtDirection(\n  defaultImage: IGatsbyImageData,\n  artDirected: Array<IArtDirectedImage>\n): IGatsbyImageData {\n  const { images, placeholder, ...props } = defaultImage\n  const output: IGatsbyImageData = {\n    ...props,\n    images: {\n      ...images,\n      sources: [],\n    },\n    placeholder: placeholder && {\n      ...placeholder,\n      sources: [],\n    },\n  }\n\n  artDirected.forEach(({ media, image }) => {\n    if (!media) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(\n          \"[gatsby-plugin-image] All art-directed images passed to must have a value set for `media`. Skipping.\"\n        )\n      }\n      return\n    }\n\n    if (\n      image.layout !== defaultImage.layout &&\n      process.env.NODE_ENV === `development`\n    ) {\n      console.warn(\n        `[gatsby-plugin-image] Mismatched image layout: expected \"${defaultImage.layout}\" but received \"${image.layout}\". All art-directed images use the same layout as the default image`\n      )\n    }\n\n    output.images.sources.push(\n      ...image.images.sources.map(source => {\n        return { ...source, media }\n      }),\n      {\n        media,\n        srcSet: image.images.fallback.srcSet,\n      }\n    )\n\n    if (!output.placeholder) {\n      return\n    }\n\n    output.placeholder.sources.push({\n      media,\n      srcSet: image.placeholder.fallback,\n    })\n  })\n  output.images.sources.push(...images.sources)\n  if (placeholder?.sources) {\n    output.placeholder?.sources.push(...placeholder.sources)\n  }\n  return output\n}\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\n\nexport interface IResponsiveImageProps {\n  sizes?: string\n  srcSet: string\n}\n\nexport type SourceProps = IResponsiveImageProps &\n  (\n    | {\n        media: string\n        type?: string\n      }\n    | {\n        media?: string\n        type: string\n      }\n  )\n\ntype FallbackProps = { src: string } & Partial<IResponsiveImageProps>\n\ntype ImageProps = ImgHTMLAttributes<HTMLImageElement> & {\n  src: string\n  alt: string\n  shouldLoad: boolean\n}\n\nexport type PictureProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: FallbackProps\n  sources?: Array<SourceProps>\n  alt: string\n  shouldLoad?: boolean\n}\n\nconst Image: FunctionComponent<ImageProps> = function Image({\n  src,\n  srcSet,\n  loading,\n  alt = ``,\n  shouldLoad,\n  ...props\n}) {\n  return (\n    <img\n      {...props}\n      decoding=\"async\"\n      loading={loading}\n      src={shouldLoad ? src : undefined}\n      data-src={!shouldLoad ? src : undefined}\n      srcSet={shouldLoad ? srcSet : undefined}\n      data-srcset={!shouldLoad ? srcSet : undefined}\n      alt={alt}\n    />\n  )\n}\n\nexport const Picture: React.FC<PictureProps> = function Picture({\n  fallback,\n  sources = [],\n  shouldLoad = true,\n  ...props\n}) {\n  const sizes = props.sizes || fallback?.sizes\n  const fallbackImage = (\n    <Image {...props} {...fallback} sizes={sizes} shouldLoad={shouldLoad} />\n  )\n\n  if (!sources.length) {\n    return fallbackImage\n  }\n\n  return (\n    <picture>\n      {sources.map(({ media, srcSet, type }) => (\n        <source\n          key={`${media}-${type}-${srcSet}`}\n          type={type}\n          media={media}\n          srcSet={shouldLoad ? srcSet : undefined}\n          data-srcset={!shouldLoad ? srcSet : undefined}\n          sizes={sizes}\n        />\n      ))}\n      {fallbackImage}\n    </picture>\n  )\n}\n\nImage.propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n  sizes: PropTypes.string,\n  srcSet: PropTypes.string,\n  shouldLoad: PropTypes.bool,\n}\n\nPicture.displayName = `Picture`\nPicture.propTypes = {\n  alt: PropTypes.string.isRequired,\n  shouldLoad: PropTypes.bool,\n  fallback: PropTypes.exact({\n    src: PropTypes.string.isRequired,\n    srcSet: PropTypes.string,\n    sizes: PropTypes.string,\n  }),\n  sources: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.exact({\n        media: PropTypes.string.isRequired,\n        type: PropTypes.string,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n      PropTypes.exact({\n        media: PropTypes.string,\n        type: PropTypes.string.isRequired,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n    ])\n  ),\n}\n","import React, { Fragment, FunctionComponent } from \"react\"\nimport terserMacro from \"../../macros/terser.macro\"\nimport { Layout } from \"../image-utils\"\n\nexport interface ILayoutWrapperProps {\n  layout: Layout\n  width: number\n  height: number\n}\n\nconst NativeScriptLoading: FunctionComponent = () => (\n  <script\n    type=\"module\"\n    dangerouslySetInnerHTML={{\n      __html: terserMacro`\nconst hasNativeLazyLoadSupport = typeof HTMLImageElement !== \"undefined\" && \"loading\" in HTMLImageElement.prototype;\nif (hasNativeLazyLoadSupport) {\n  const gatsbyImages = document.querySelectorAll('img[data-main-image]');\n  for (let mainImage of gatsbyImages) {\n    if (mainImage.dataset.src) {\n      mainImage.setAttribute('src', mainImage.dataset.src)\n      mainImage.removeAttribute('data-src')\n    }\n    if (mainImage.dataset.srcset) {\n      mainImage.setAttribute('srcset', mainImage.dataset.srcset)\n      mainImage.removeAttribute('data-srcset')\n    }\n\n    const sources = mainImage.parentNode.querySelectorAll('source[data-srcset]');\n    for (let source of sources) {\n      source.setAttribute('srcset', source.dataset.srcset)\n      source.removeAttribute('data-srcset')\n    }\n\n    if (mainImage.complete) {\n      mainImage.style.opacity = 1;\n\n      // also hide the placeholder\n      mainImage.parentNode.parentNode.querySelector('[data-placeholder-image]').style.opacity = 0;\n    }\n  }\n}\n`,\n    }}\n  />\n)\n\nexport function getSizer(\n  layout: Layout,\n  width: number,\n  height: number\n): string {\n  let sizer = ``\n  if (layout === `fullWidth`) {\n    sizer = `<div aria-hidden=\"true\" style=\"padding-top: ${\n      (height / width) * 100\n    }%;\"></div>`\n  }\n\n  if (layout === `constrained`) {\n    sizer = `<div style=\"max-width: ${width}px; display: block;\"><img alt=\"\" role=\"presentation\" aria-hidden=\"true\" src=\"data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E\" style=\"max-width: 100%; display: block; position: static;\"></div>`\n  }\n\n  return sizer\n}\n\nconst Sizer: FunctionComponent<ILayoutWrapperProps> = function Sizer({\n  layout,\n  width,\n  height,\n}) {\n  if (layout === `fullWidth`) {\n    return (\n      <div aria-hidden style={{ paddingTop: `${(height / width) * 100}%` }} />\n    )\n  }\n\n  if (layout === `constrained`) {\n    return (\n      <div style={{ maxWidth: width, display: `block` }}>\n        <img\n          alt=\"\"\n          role=\"presentation\"\n          aria-hidden=\"true\"\n          src={`data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E`}\n          style={{\n            maxWidth: `100%`,\n            display: `block`,\n            position: `static`,\n          }}\n        />\n      </div>\n    )\n  }\n\n  return null\n}\n\nexport const LayoutWrapper: FunctionComponent<ILayoutWrapperProps> =\n  function LayoutWrapper({ children, ...props }) {\n    return (\n      <Fragment>\n        <Sizer {...props} />\n        {children}\n\n        {SERVER ? <NativeScriptLoading /> : null}\n      </Fragment>\n    )\n  }\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\nimport { Picture, SourceProps } from \"./picture\"\n\nexport type PlaceholderProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: string\n  sources?: Array<SourceProps>\n}\n\nexport const Placeholder: FunctionComponent<PlaceholderProps> =\n  function Placeholder({ fallback, ...props }) {\n    if (fallback) {\n      return (\n        <Picture\n          {...props}\n          fallback={{\n            src: fallback,\n          }}\n          aria-hidden\n          alt=\"\"\n        />\n      )\n    } else {\n      return <div {...props}></div>\n    }\n  }\n\nPlaceholder.displayName = `Placeholder`\nPlaceholder.propTypes = {\n  fallback: PropTypes.string,\n  sources: Picture.propTypes?.sources,\n  alt: function (props, propName, componentName): Error | null {\n    if (!props[propName]) {\n      return null\n    }\n\n    return new Error(\n      `Invalid prop \\`${propName}\\` supplied to \\`${componentName}\\`. Validation failed.`\n    )\n  },\n}\n","import React from \"react\"\nimport { Picture, PictureProps } from \"./picture\"\n\nexport type MainImageProps = PictureProps\n\nexport const MainImage: React.FC<PictureProps> = function MainImage(props) {\n  return (\n    <>\n      <Picture {...props} />\n      <noscript>\n        <Picture {...props} shouldLoad={true} />\n      </noscript>\n    </>\n  )\n}\n\nMainImage.displayName = `MainImage`\nMainImage.propTypes = Picture.propTypes\n","import {\n  createElement,\n  memo,\n  useMemo,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n} from \"react\"\nimport {\n  getWrapperProps,\n  gatsbyImageIsInstalled,\n  hasNativeLazyLoadSupport,\n} from \"./hooks\"\nimport { getSizer } from \"./layout-wrapper\"\nimport { propTypes } from \"./gatsby-image.server\"\nimport type {\n  FC,\n  ElementType,\n  FunctionComponent,\n  ImgHTMLAttributes,\n  CSSProperties,\n  ReactEventHandler,\n} from \"react\"\nimport type { renderImageToString } from \"./lazy-hydrate\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { Layout } from \"../image-utils\"\n\nconst imageCache = new Set<string>()\nlet renderImageToStringPromise\nlet renderImage: typeof renderImageToString | undefined\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface GatsbyImageProps\n  extends Omit<\n    ImgHTMLAttributes<HTMLImageElement>,\n    \"placeholder\" | \"onLoad\" | \"src\" | \"srcSet\" | \"width\" | \"height\"\n  > {\n  alt: string\n  as?: ElementType\n  className?: string\n  class?: string\n  imgClassName?: string\n  image: IGatsbyImageData\n  imgStyle?: CSSProperties\n  backgroundColor?: string\n  objectFit?: CSSProperties[\"objectFit\"]\n  objectPosition?: CSSProperties[\"objectPosition\"]\n  onLoad?: (props: { wasCached: boolean }) => void\n  onError?: ReactEventHandler<HTMLImageElement>\n  onStartLoad?: (props: { wasCached: boolean }) => void\n}\n\nexport interface IGatsbyImageData {\n  layout: Layout\n  width: number\n  height: number\n  backgroundColor?: string\n  images: Pick<MainImageProps, \"sources\" | \"fallback\">\n  placeholder?: Pick<PlaceholderProps, \"sources\" | \"fallback\">\n}\n\nconst GatsbyImageHydrator: FC<GatsbyImageProps> = function GatsbyImageHydrator({\n  as = `div`,\n  image,\n  style,\n  backgroundColor,\n  className,\n  class: preactClass,\n  onStartLoad,\n  onLoad,\n  onError,\n  ...props\n}) {\n  const { width, height, layout } = image\n  const {\n    style: wStyle,\n    className: wClass,\n    ...wrapperProps\n  } = getWrapperProps(width, height, layout)\n  const root = useRef<HTMLElement>()\n  const cacheKey = useMemo(() => JSON.stringify(image.images), [image.images])\n\n  // Preact uses class instead of className so we need to check for both\n  if (preactClass) {\n    className = preactClass\n  }\n\n  const sizer = getSizer(layout, width, height)\n\n  useEffect(() => {\n    if (!renderImageToStringPromise) {\n      renderImageToStringPromise = import(`./lazy-hydrate`).then(\n        ({ renderImageToString, swapPlaceholderImage }) => {\n          renderImage = renderImageToString\n\n          return {\n            renderImageToString,\n            swapPlaceholderImage,\n          }\n        }\n      )\n    }\n\n    // The plugin image component is a bit special where if it's server-side rendered, we add extra script tags to support lazy-loading without\n    // In this case we stop hydration but fire the correct events.\n    const ssrImage = root.current.querySelector(\n      `[data-gatsby-image-ssr]`\n    ) as HTMLImageElement\n    if (ssrImage && hasNativeLazyLoadSupport()) {\n      if (ssrImage.complete) {\n        // Trigger onStartload and onLoad events\n        onStartLoad?.({\n          wasCached: true,\n        })\n        onLoad?.({\n          wasCached: true,\n        })\n\n        // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n        setTimeout(() => {\n          ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n        }, 0)\n      } else {\n        onStartLoad?.({\n          wasCached: true,\n        })\n\n        ssrImage.addEventListener(`load`, function onLoadListener() {\n          ssrImage.removeEventListener(`load`, onLoadListener)\n\n          onLoad?.({\n            wasCached: true,\n          })\n          // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n          setTimeout(() => {\n            ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n          }, 0)\n        })\n      }\n\n      imageCache.add(cacheKey)\n\n      return\n    }\n\n    if (renderImage && imageCache.has(cacheKey)) {\n      return\n    }\n\n    let animationFrame\n    let cleanupCallback\n    renderImageToStringPromise.then(\n      ({ renderImageToString, swapPlaceholderImage }) => {\n        if (!root.current) {\n          return\n        }\n\n        root.current.innerHTML = renderImageToString({\n          isLoading: true,\n          isLoaded: imageCache.has(cacheKey),\n          image,\n          ...props,\n        })\n\n        if (!imageCache.has(cacheKey)) {\n          animationFrame = requestAnimationFrame(() => {\n            if (root.current) {\n              cleanupCallback = swapPlaceholderImage(\n                root.current,\n                cacheKey,\n                imageCache,\n                style,\n                onStartLoad,\n                onLoad,\n                onError\n              )\n            }\n          })\n        }\n      }\n    )\n\n    // eslint-disable-next-line consistent-return\n    return (): void => {\n      if (animationFrame) {\n        cancelAnimationFrame(animationFrame)\n      }\n      if (cleanupCallback) {\n        cleanupCallback()\n      }\n    }\n  }, [image])\n\n  // useLayoutEffect is ran before React commits to the DOM. This allows us to make sure our HTML is using our cached image version\n  useLayoutEffect(() => {\n    if (imageCache.has(cacheKey) && renderImage) {\n      root.current.innerHTML = renderImage({\n        isLoading: imageCache.has(cacheKey),\n        isLoaded: imageCache.has(cacheKey),\n        image,\n        ...props,\n      })\n\n      // Trigger onStartload and onLoad events\n      onStartLoad?.({\n        wasCached: true,\n      })\n      onLoad?.({\n        wasCached: true,\n      })\n    }\n  }, [image])\n\n  // By keeping all props equal React will keep the component in the DOM\n  return createElement(as, {\n    ...wrapperProps,\n    style: {\n      ...wStyle,\n      ...style,\n      backgroundColor,\n    },\n    className: `${wClass}${className ? ` ${className}` : ``}`,\n    ref: root,\n    dangerouslySetInnerHTML: {\n      __html: sizer,\n    },\n    suppressHydrationWarning: true,\n  })\n}\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> = memo(\n  function GatsbyImage(props) {\n    if (!props.image) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(`[gatsby-plugin-image] Missing image prop`)\n      }\n\n      return null\n    }\n\n    if (!gatsbyImageIsInstalled() && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `[gatsby-plugin-image] You're missing out on some cool performance features. Please add \"gatsby-plugin-image\" to your gatsby-config.js`\n      )\n    }\n\n    return createElement(GatsbyImageHydrator, props)\n  }\n)\n\nGatsbyImage.propTypes = propTypes\nGatsbyImage.displayName = `GatsbyImage`\n","import React from \"react\"\nimport { getWrapperProps, getMainProps, getPlaceholderProps } from \"./hooks\"\nimport { Placeholder } from \"./placeholder\"\nimport { MainImage, MainImageProps } from \"./main-image\"\nimport { LayoutWrapper } from \"./layout-wrapper\"\nimport PropTypes from \"prop-types\"\nimport type { FunctionComponent, WeakValidationMap } from \"react\"\nimport type { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\n\nconst removeNewLines = (str: string): string => str.replace(/\\n/g, ``)\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> =\n  function GatsbyImage({\n    as = `div`,\n    className,\n    class: preactClass,\n    style,\n    image,\n    loading = `lazy`,\n    imgClassName,\n    imgStyle,\n    backgroundColor,\n    objectFit,\n    objectPosition,\n    ...props\n  }) {\n    if (!image) {\n      console.warn(`[gatsby-plugin-image] Missing image prop`)\n      return null\n    }\n\n    if (preactClass) {\n      className = preactClass\n    }\n\n    imgStyle = {\n      objectFit,\n      objectPosition,\n      backgroundColor,\n      ...imgStyle,\n    }\n\n    const {\n      width,\n      height,\n      layout,\n      images,\n      placeholder,\n      backgroundColor: placeholderBackgroundColor,\n    } = image\n\n    const {\n      style: wStyle,\n      className: wClass,\n      ...wrapperProps\n    } = getWrapperProps(width, height, layout)\n\n    const cleanedImages: IGatsbyImageData[\"images\"] = {\n      fallback: undefined,\n      sources: [],\n    }\n    if (images.fallback) {\n      cleanedImages.fallback = {\n        ...images.fallback,\n        srcSet: images.fallback.srcSet\n          ? removeNewLines(images.fallback.srcSet)\n          : undefined,\n      }\n    }\n\n    if (images.sources) {\n      cleanedImages.sources = images.sources.map(source => {\n        return {\n          ...source,\n          srcSet: removeNewLines(source.srcSet),\n        }\n      })\n    }\n\n    return React.createElement(\n      as,\n      {\n        ...wrapperProps,\n        style: {\n          ...wStyle,\n          ...style,\n          backgroundColor,\n        },\n        className: `${wClass}${className ? ` ${className}` : ``}`,\n      },\n      <LayoutWrapper layout={layout} width={width} height={height}>\n        <Placeholder\n          {...getPlaceholderProps(\n            placeholder,\n            false,\n            layout,\n            width,\n            height,\n            placeholderBackgroundColor,\n            objectFit,\n            objectPosition\n          )}\n        />\n\n        <MainImage\n          data-gatsby-image-ssr=\"\"\n          className={imgClassName}\n          {...(props as Omit<\n            MainImageProps,\n            \"images\" | \"fallback\" | \"onError\" | \"onLoad\"\n          >)}\n          // When eager is set we want to start the isLoading state on true (we want to load the img without react)\n          {...getMainProps(\n            loading === `eager`,\n            false,\n            cleanedImages,\n            loading,\n            imgStyle\n          )}\n        />\n      </LayoutWrapper>\n    )\n  }\n\nexport const altValidator: PropTypes.Validator<string> = (\n  props: GatsbyImageProps,\n  propName,\n  componentName,\n  ...rest\n): Error | undefined => {\n  if (!props.alt && props.alt !== ``) {\n    return new Error(\n      `The \"alt\" prop is required in ${componentName}. If the image is purely presentational then pass an empty string: e.g. alt=\"\". Learn more: https://a11y-style-guide.com/style-guide/section-media.html`\n    )\n  }\n\n  return PropTypes.string(props, propName, componentName, ...rest)\n}\n\nexport const propTypes = {\n  image: PropTypes.object.isRequired,\n  alt: altValidator,\n} as WeakValidationMap<GatsbyImageProps>\n","import React, { FunctionComponent, ReactElement } from \"react\"\nimport {\n  altValidator,\n  GatsbyImage as GatsbyImageServer,\n} from \"./gatsby-image.server\"\nimport { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\nimport PropTypes from \"prop-types\"\nimport { ISharpGatsbyImageArgs } from \"../image-utils\"\n\nexport interface IStaticImageProps\n  extends Omit<GatsbyImageProps, \"image\">,\n    Omit<ISharpGatsbyImageArgs, \"backgroundColor\"> {\n  src: string\n}\n\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nexport function _getStaticImage(\n  GatsbyImage: FunctionComponent<GatsbyImageProps>\n): React.FC<IStaticImageProps & IPrivateProps> {\n  return function StaticImage({\n    src,\n    __imageData: imageData,\n    __error,\n    // We extract these because they're not meant to be passed-down to GatsbyImage\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    width,\n    height,\n    aspectRatio,\n    tracedSVGOptions,\n    placeholder,\n    formats,\n    quality,\n    transformOptions,\n    jpgOptions,\n    pngOptions,\n    webpOptions,\n    avifOptions,\n    blurredOptions,\n    breakpoints,\n    outputPixelDensities,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    ...props\n  }): ReactElement {\n    if (__error) {\n      console.warn(__error)\n    }\n\n    if (imageData) {\n      return <GatsbyImage image={imageData} {...props} />\n    }\n    console.warn(`Image not loaded`, src)\n    if (!__error && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `Please ensure that \"gatsby-plugin-image\" is included in the plugins array in gatsby-config.js, and that your version of gatsby is at least 2.24.78`\n      )\n    }\n    return null\n  }\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageServer)\n\nconst checkDimensionProps: PropTypes.Validator<number> = (\n  props: IStaticImageProps & IPrivateProps,\n  propName: keyof IStaticImageProps & IPrivateProps,\n  ...rest\n) => {\n  if (\n    props.layout === `fullWidth` &&\n    (propName === `width` || propName === `height`) &&\n    props[propName]\n  ) {\n    return new Error(\n      `\"${propName}\" ${props[propName]} may not be passed when layout is fullWidth.`\n    )\n  }\n  return PropTypes.number(props, propName, ...rest)\n}\n\nconst validLayouts = new Set([`fixed`, `fullWidth`, `constrained`])\n\nexport const propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: altValidator,\n  width: checkDimensionProps,\n  height: checkDimensionProps,\n  sizes: PropTypes.string,\n  layout: (props: IStaticImageProps & IPrivateProps): Error | undefined => {\n    if (props.layout === undefined) {\n      return undefined\n    }\n    if (validLayouts.has(props.layout)) {\n      return undefined\n    }\n\n    return new Error(\n      `Invalid value ${props.layout}\" provided for prop \"layout\". Defaulting to \"constrained\". Valid values are \"fixed\", \"fullWidth\" or \"constrained\".`\n    )\n  },\n}\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","import {\n  GatsbyImage as GatsbyImageBrowser,\n  IGatsbyImageData,\n} from \"./gatsby-image.browser\"\nimport React from \"react\"\nimport {\n  _getStaticImage,\n  propTypes,\n  IStaticImageProps,\n} from \"./static-image.server\"\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageBrowser)\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","import { IconDefinition, faGithub, faLinkedin } from \"@fortawesome/free-brands-svg-icons\";\nimport { useTranslation } from \"gatsby-plugin-react-i18next\";\n\ntype SocialLink = {\n  icon: IconDefinition | string;\n  name: string;\n  url: string;\n  title?: string;\n};\n\nexport function useSocialLinks(): Array<SocialLink> {\n  const { t } = useTranslation();\n  return [\n    {\n      icon: faGithub,\n      name: t(\"Github\"),\n      url: \"https://github.com/escemi-tech\",\n    },\n    {\n      icon: faLinkedin,\n      name: t(\"LinkedIn\"),\n      url: \"https://www.linkedin.com/company/escemi\",\n    },\n    {\n      icon: \"icon-social-malt\",\n      name: t(\"Malt\"),\n      url: \"https://www.malt.fr/profile/emilienescalle\",\n    },\n    {\n      icon: \"icon-social-buildandrun\",\n      name: t(\"BuildAndRun\"),\n      url: \"https://www.build-and-run.fr/\",\n      title: t(\"Member of BuildAndRun\"),\n    },\n  ];\n}\n","import { useTranslation } from \"gatsby-plugin-react-i18next\";\nimport React, { ReactElement } from \"react\";\n\nimport { SkillItem, useSkillItems } from \"./useSkillItems\";\n\nconst SkillItemRender = ({ label, items }: SkillItem) => {\n  return (\n    <div className=\"col-lg-3\">\n      <h3 className=\"text-secondary\">{label}</h3>\n      <ul className=\"list-unstyled\">\n        {items.map((item, index) => (\n          <li key={`skill-item-${label}-${index}`}>✓ {item}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nconst Skills = (): ReactElement => {\n  const skillItems = useSkillItems();\n  const { t } = useTranslation();\n  return (\n    <>\n      <h2 className=\"text-center mb-5\">{t(\"Skills\")}</h2>\n      <div className=\"row\">\n        {skillItems.map((skill) => (\n          <SkillItemRender key={skill.label} {...skill} />\n        ))}\n      </div>\n    </>\n  );\n};\n\nexport default Skills;\n","import { useTranslation } from 'gatsby-plugin-react-i18next';\n\nexport type SkillItem = {\n  label: string;\n  items: string[];\n};\n\nexport function useSkillItems(): SkillItem[] {\n  const { t } = useTranslation();\n  return [\n    {\n      label: t('Methodologies'),\n      items: [t('Scrum'), t('TDD'), t('Kanban'), t('Kaizen'), t('UML')],\n    },\n    {\n      label: t('Architecture / Lead development'),\n      items: [\n        t('Craftmanship'),\n        t('Developer Experience'),\n        t('Architecture decision record'),\n      ],\n    },\n    {\n      label: t('Cloud'),\n      items: [t('Cloud developer'), t('Serverless'), t('Amazon Web Services')],\n    },\n    {\n      label: t('Frameworks'),\n      items: ['React.js', 'Angular', 'NestJS', 'Laminas / Zend'],\n    },\n    {\n      label: t('Testing'),\n      items: [t('Jest'), t('Cypress'), t('PHPUnit')],\n    },\n    {\n      label: t('Languages'),\n      items: ['Typescript / JavaScript', 'PHP'],\n    },\n    {\n      label: t('Databases'),\n      items: [\n        t('Mysql'),\n        t('MongoDB'),\n        t('PostgreSQL'),\n        t('SQL Server'),\n        t('Elasticsearch'),\n      ],\n    },\n    {\n      label: t('Continuous integration'),\n      items: [t('Jenkins'), t('Gitlab CI'), t('Github Actions')],\n    },\n    {\n      label: t('Platforms'),\n      items: [t('Linux'), t('Node.js')],\n    },\n    {\n      label: t('Version control'),\n      items: [t('GitHub'), t('Gitlab'), t('Git')],\n    },\n  ];\n}\n","import { IconProp } from \"@fortawesome/fontawesome-svg-core\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React, { ReactElement } from \"react\";\n\ntype SocialIconProps = {\n  icon: string | IconProp;\n};\n\nfunction isFontAwesomeIcon(icon: string | IconProp): icon is IconProp {\n  return typeof icon === \"object\";\n}\n\nconst SocialIcon = ({ icon }: SocialIconProps): ReactElement => {\n  return isFontAwesomeIcon(icon) ? <FontAwesomeIcon icon={icon} /> : <i className={icon}></i>;\n};\n\nexport default SocialIcon;\n","import { StaticImage } from \"gatsby-plugin-image\";\nimport { useTranslation } from \"gatsby-plugin-react-i18next\";\nimport React, { ReactElement } from \"react\";\n\nimport { useSocialLinks } from \"../config/useSocialLinks\";\nimport Scroll from \"../scroll/Scroll\";\nimport Skills from \"../skills/Skills\";\nimport SocialIcon from \"../social-icon/SocialIcon\";\n\nconst About = (): ReactElement => {\n  const { t } = useTranslation();\n  const socialLinks = useSocialLinks();\n\n  return (\n    <section className=\"content-section bg-light\" id=\"about\">\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-lg-10 mx-auto\">\n            <h2 className=\"text-center\">{t(\"About us\")}</h2>\n            <div className=\"row\">\n              <div className=\"col-sm-3 text-center\">\n                <StaticImage\n                  className=\"rounded-circle\"\n                  src=\"../../assets/img/avatar.jpg\"\n                  alt={t(\"Profile\")}\n                  width={200}\n                  height={210}\n                />\n              </div>\n\n              <div className=\"col-sm-9 lead text-justify\">\n                {t(\n                  \"Driven by a 12-years expertise in the digital field, my professional career has been refined on the themes of Information Systems architecture, project management and IT team management.\"\n                )}\n                <br />\n                <br />\n                {t(\n                  \"The whole of these experiences are found within the ESCEMI company which will be at the service of your projects, to bring you technical and relational competences, with a sense of the rigour and the work well made.\"\n                )}\n              </div>\n            </div>\n            <div className=\"row mt-5 lead\">\n              {socialLinks.map((social) => {\n                const { icon, name, url, title } = social;\n\n                return (\n                  <div key={`about-social-${name}`} className=\"col-sm-3\">\n                    <a\n                      href={url}\n                      title={title?.length ? title : name}\n                      className=\"social-link d-block\"\n                      rel=\"noopener noreferrer nofollow\"\n                      target=\"_blank\"\n                    >\n                      ✓ <SocialIcon icon={icon} /> {name}\n                    </a>\n                  </div>\n                );\n              })}\n            </div>\n            <hr className=\"mb-5\" />\n            <Skills />\n            <hr className=\"mb-5\" />\n            <p></p>\n            <div className=\"text-center\">\n              <Scroll type=\"id\" element=\"services\" offset={100}>\n                <a className=\"btn btn-primary btn-xl\" href=\"#services\">\n                  {t(\"Services & missions\")}\n                </a>\n              </Scroll>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default About;\n","import { useTranslation } from \"gatsby-plugin-react-i18next\";\nimport React, { ReactElement } from \"react\";\n\nimport { useContactFormUrl } from \"../config/useContactFormUrl\";\n\nconst ContactForm = (): ReactElement => {\n  const { t } = useTranslation();\n  const contactFormUrl = useContactFormUrl();\n  return (\n    <form\n      action={contactFormUrl}\n      name=\"contact\"\n      method=\"POST\"\n      data-netlify=\"true\"\n      className=\"offset-sm-1 col-sm-8\"\n    >\n      <div className=\"row mb-3\">\n        <label htmlFor=\"name\" className=\"col-sm-4 col-form-label col-form-label-lg text-secondary\">\n          {t(\"Nom\")}\n        </label>\n        <div className=\"col-sm-8\">\n          <input\n            type=\"text\"\n            id=\"name\"\n            name=\"name\"\n            className=\"form-control form-control-lg\"\n            required\n          />\n        </div>\n      </div>\n      <div className=\"row mb-3\">\n        <label htmlFor=\"email\" className=\"col-sm-4 col-form-label col-form-label-lg text-secondary\">\n          {t(\"Email\")}\n        </label>\n        <div className=\"col-sm-8\">\n          <input id=\"email\" name=\"email\" type=\"email\" className=\"form-control form-control-lg\" />\n        </div>\n      </div>\n      <div className=\"row mb-3\">\n        <label\n          htmlFor=\"message\"\n          className=\"col-sm-4 col-form-label col-form-label-lg text-secondary\"\n        >\n          {t(\"Message\")}\n        </label>\n        <div className=\"col-sm-8\">\n          <textarea\n            id=\"message\"\n            name=\"message\"\n            className=\"form-control form-control-lg\"\n            required\n          ></textarea>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"offset-sm-4 col-sm-8 text-left\">\n          <button type=\"submit\" className=\"btn btn-lg btn-secondary\">\n            {t(\"Send\")}\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n\nconst Contact = (): ReactElement => {\n  const { t } = useTranslation();\n\n  return (\n    <section id=\"contact\" className=\"callout\">\n      <div className=\"container text-center\">\n        <h2 className=\"mx-auto mb-5 text-white\">{t(\"A project, a mission: contact us!\")}</h2>\n        <div className=\"row align-items-center\">\n          <ContactForm />\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default Contact;\n","export function useContactFormUrl(): string {\n  return \"https://send.pageclip.co/34lOq1sIPupZSsVzENW1iopL4hyuqP0M/contact-form\";\n}\n","import { Link, useI18next, useTranslation } from \"gatsby-plugin-react-i18next\";\nimport React, { ReactElement } from \"react\";\n\nimport { useSocialLinks } from \"../config/useSocialLinks\";\nimport Scroll from \"../scroll/Scroll\";\nimport SocialIcon from \"../social-icon/SocialIcon\";\n\nexport default function Footer(): ReactElement {\n  const { originalPath } = useI18next();\n  const { t } = useTranslation();\n  const socialLinks = useSocialLinks();\n\n  return (\n    <footer className=\"footer text-center\">\n      <div className=\"container\">\n        <div className=\"row justify-content-center\">\n          {socialLinks.map((social) => {\n            const { icon, name, url, title } = social;\n            return (\n              <div key={name} className=\"col-3\">\n                <a\n                  href={url}\n                  className=\"social-link rounded-circle text-white\"\n                  title={title?.length ? title : name}\n                  rel=\"noopener noreferrer nofollow\"\n                  target=\"_blank\"\n                >\n                  <SocialIcon icon={icon} />\n                </a>\n              </div>\n            );\n          })}\n        </div>\n        <div className=\"row justify-content-md-center footer-internal-links\">\n          <div className=\"col \">\n            <p className=\"text-muted small mt-5\">\n              &copy; {new Date().getFullYear()} {t(\"Copyright\")} -{\" \"}\n              <a href=\"https://www.escemi.com/\">{t(\"ESCEMI\")}</a>\n              <Link to={originalPath} language=\"fr\">\n                {t(\"French\")}\n              </Link>\n              |\n              <Link to={originalPath} language={\"en\"}>\n                {t(\"English\")}\n              </Link>{\" \"}\n              -{\" \"}\n              <Scroll type=\"class\" element=\"page-top\">\n                <a href=\"#page-top\">{t(\"Home\")}</a>\n              </Scroll>\n              |\n              <Scroll type=\"id\" element=\"about\">\n                <a href=\"#about\">{t(\"About us\")}</a>\n              </Scroll>\n              |\n              <Scroll type=\"id\" element=\"services\">\n                <a href=\"#services\">{t(\"Services & missions\")}</a>\n              </Scroll>\n              |\n              <Scroll type=\"id\" element=\"contact\">\n                <a href=\"#contact\">{t(\"Contact\")}</a>\n              </Scroll>\n              |\n              <Scroll type=\"id\" element=\"portfolio\">\n                <a href=\"#portfolio\">{t(\"Portfolio\")}</a>\n              </Scroll>\n            </p>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","import { StaticImage } from \"gatsby-plugin-image\";\nimport { useTranslation } from \"gatsby-plugin-react-i18next\";\nimport React, { ReactElement } from \"react\";\n\nimport Scroll from \"../scroll/Scroll\";\n\nconst Masthead = (): ReactElement => {\n  const { t } = useTranslation();\n\n  return (\n    <header className=\"masthead d-flex\">\n      <div className=\"container text-center\">\n        <h1 className=\"mb-3\">\n          <StaticImage\n            src=\"../../assets/img/website-icon.png\"\n            alt={t(\"Logo ESCEMI\")}\n            placeholder=\"blurred\"\n            height={240}\n            aspectRatio={1}\n          />\n        </h1>\n        <h2 className=\"mb-5\">\n          <em>\n            {t(\"At your service to support you and meet the challenges of your digital projects\")}\n          </em>\n        </h2>\n        <Scroll type=\"id\" element=\"about\" offset={100}>\n          <a className=\"btn btn-primary btn-xl\" href=\"#about\">\n            {t(\"About us\")}\n          </a>\n        </Scroll>\n      </div>\n      <div className=\"overlay\"></div>\n    </header>\n  );\n};\n\nexport default Masthead;\n","import { useTranslation } from \"gatsby-plugin-react-i18next\";\nimport React, { ReactElement } from \"react\";\n\nconst OpenSource = (): ReactElement => {\n  const {\n    t,\n    i18n: { language },\n  } = useTranslation();\n\n  const githubStatsUrl = new URL(\"https://github-readme-stats.vercel.app/api\");\n  githubStatsUrl.searchParams.append(\"username\", \"neilime\");\n  githubStatsUrl.searchParams.append(\"show_icons\", \"true\");\n  githubStatsUrl.searchParams.append(\"locale\", language);\n  githubStatsUrl.searchParams.append(\"title_color\", \"ecb807\");\n  githubStatsUrl.searchParams.append(\"icon_color\", \"ecb807\");\n  githubStatsUrl.searchParams.append(\"text_color\", \"ffffff\");\n  githubStatsUrl.searchParams.append(\"hide_border\", \"true\");\n  githubStatsUrl.searchParams.append(\"bg_color\", \"1c3144\");\n  githubStatsUrl.searchParams.append(\"border_radius\", \"0\");\n  githubStatsUrl.searchParams.append(\"line_height\", \"30\");\n  githubStatsUrl.searchParams.append(\"include_all_commits\", \"true\");\n\n  return (\n    <section className=\"content-section bg-primary text-white\" id=\"open-source\">\n      <div className=\"container\">\n        <h2 className=\"mb-4\">{t(\"We contribute to the open source scene\")}</h2>\n\n        <div className=\"row\">\n          <div className=\"col-sm-5\">\n            <ul className=\"list-unstyled text-start\">\n              <li>\n                <a\n                  href=\"https://github.com/neilime?tab=repositories\"\n                  className=\"text-white\"\n                  rel=\"noopener noreferrer nofollow\"\n                  target=\"_blank\"\n                >\n                  {t(\"Github contributions\")}\n                </a>\n              </li>\n              <li>\n                <a\n                  href=\"https://archiveprogram.github.com/\"\n                  className=\"text-white\"\n                  rel=\"noopener noreferrer nofollow\"\n                  target=\"_blank\"\n                >\n                  {t('Contributor to the \"Arctic Code Vault\" program')}\n                </a>\n              </li>\n            </ul>\n          </div>\n          <div className=\"col-sm-7\">\n            <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/neilime\">\n              <img\n                src={githubStatsUrl.toString()}\n                alt={t(\"Github statistics\")}\n                className=\"img-fluid\"\n              />\n            </a>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default OpenSource;\n","import { GatsbyImage, getImage } from \"gatsby-plugin-image\";\nimport { useTranslation } from \"gatsby-plugin-react-i18next\";\nimport React, { Fragment, ReactElement } from \"react\";\n\nimport { PortfolioItem, usePortfolioItems } from \"./usePortfolioItems\";\n\nconst PortfolioItemRender = ({ title, subtitle, url, imageFile, content }: PortfolioItem) => {\n  const imageData = getImage(imageFile);\n\n  if (!imageData) {\n    throw new Error(`Unable to find image file for image \"${imageFile.id}\"`);\n  }\n  return (\n    <div className=\"col-lg-6 portfolio-container\">\n      <h2>{title}</h2>\n      <h3 className=\"mb-3\">{subtitle}</h3>\n      <a className=\"portfolio-item\" href={url} rel=\"noopener noreferrer nofollow\" target=\"_blank\">\n        <span className=\"caption\">\n          <span className=\"caption-content\">\n            <p className=\"mb-0\">\n              {content.map((line, index) => (\n                <Fragment key={`${url}-${index}`}>\n                  ✓ {line}\n                  <br />\n                </Fragment>\n              ))}\n            </p>\n          </span>\n        </span>\n        <GatsbyImage className=\"img-fluid\" image={imageData} alt={title} />\n      </a>\n    </div>\n  );\n};\n\nconst Portfolio = (): ReactElement => {\n  const portfolioItems = usePortfolioItems();\n  const { t } = useTranslation();\n\n  return (\n    <section className=\"content-section\" id=\"portfolio\">\n      <div className=\"container\">\n        <div className=\"content-section-heading text-center\">\n          <h3 className=\"text-secondary mb-3\">{t(\"Portfolio\")}</h3>\n          <h2 className=\"mb-5\">{t(\"Latest projects\")}</h2>\n        </div>\n        <div className=\"row\">\n          {portfolioItems.map((item) => (\n            <PortfolioItemRender key={item.url} {...item} />\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default Portfolio;\n","import { graphql, useStaticQuery } from \"gatsby\";\nimport { FileNode } from \"gatsby-plugin-image/dist/src/components/hooks\";\nimport { useTranslation } from \"gatsby-plugin-react-i18next\";\n\nexport type PortfolioItem = {\n  title: string;\n  subtitle: string;\n  url: string;\n  imageFile: FileNode;\n  content: string[];\n};\n\nexport function usePortfolioItems(): Array<PortfolioItem> {\n  const { t } = useTranslation();\n  const files = useStaticQuery(\n    graphql`\n      {\n        allFile(filter: { extension: { eq: \"jpg\" } }) {\n          nodes {\n            relativePath\n            childImageSharp {\n              gatsbyImageData(\n                width: 636\n                height: 378\n                placeholder: BLURRED\n                formats: [AUTO, WEBP, AVIF]\n              )\n            }\n          }\n        }\n      }\n    `\n  );\n\n  const getImage = (image: string) => {\n    const imageFile = files?.allFile.nodes.find(\n      (file: FileNode) => file.relativePath === `portfolio/${image}`\n    );\n    if (!imageFile) {\n      throw new Error(`Unable to fiund image file for image \"${image}\"`);\n    }\n    return imageFile;\n  };\n\n  return [\n    {\n      title: t(\"Atlas of Natural Regions\"),\n      subtitle: t(\"Project of photographic archive of the French territory\"),\n      url: \"https://www.archive-arn.fr\",\n      imageFile: getImage(\"portfolio-1.jpg\"),\n      content: [\n        t(\"Serverless architecture: Amplify, Cloudfront, Aurora Serverless\"),\n        t(\"CI/CD: Github Action\"),\n        t(\"Backend development: AWS Lambda / Typescript / GraphQL\"),\n        t(\"Backoffice development: React / Typescript\"),\n      ],\n    },\n    {\n      title: t(\"Spotishakr\"),\n      subtitle: t(\"Spotify Playlist Generator\"),\n      url: \"https://spotishakr.netlify.app\",\n      imageFile: getImage(\"portfolio-2.jpg\"),\n      content: [\n        t(\"JAMSTACK architecture: Netlify\"),\n        t(\"Backend development: Typescript / Netlify function\"),\n        t(\"Frontend development: React / Typescript\"),\n      ],\n    },\n    {\n      title: t(\"TwbsHelper\"),\n      subtitle: t(\n        \"Laminas (formerly Zend Framework) module for easy integration of the Twitter Bootstrap v4\"\n      ),\n      url: \"https://neilime.github.io/twbs-helper-module\",\n      imageFile: getImage(\"portfolio-3.jpg\"),\n      content: [t(\"Development: PHP\"), t(\"Documentation: Docusaurus / auto-generated docs\")],\n    },\n    {\n      title: t(\"MyEasySchool\"),\n      subtitle: t(\"SAAS platform for classroom management\"),\n      url: \"https://master.d2esspr3nj3mny.amplifyapp.com\",\n      imageFile: getImage(\"portfolio-4.jpg\"),\n      content: [\n        t(\"Serverless architecture: Amplify, DynamoDB\"),\n        t(\"CI/CD: AWS Code Build\"),\n        t(\"Backend development: AWS Lambda / Typescript / GraphQL\"),\n        t(\"Frontend development: React / Typescript\"),\n      ],\n    },\n  ];\n}\n","import { faAngleUp } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { Translation } from \"gatsby-plugin-react-i18next\";\nimport React, { Component, PropsWithChildren, ReactElement } from \"react\";\n\nimport Scroll from \"../scroll/Scroll\";\n\ntype State = {\n  visibilityClass: \"show\" | \"hide\" | \"\";\n};\n\nexport default class ScrollToTop extends Component<unknown, State> {\n  constructor(props: PropsWithChildren<unknown>) {\n    super(props);\n    this.state = {\n      visibilityClass: \"\",\n    };\n  }\n\n  handleScroll = (): void => {\n    const { visibilityClass } = this.state;\n    if (window.pageYOffset > 300) {\n      if (visibilityClass !== \"show\") {\n        this.setState({ visibilityClass: \"show\" });\n      }\n    } else {\n      if (visibilityClass === \"show\") {\n        this.setState({ visibilityClass: \"hide\" });\n      }\n    }\n  };\n\n  componentDidMount(): void {\n    window.addEventListener(\"scroll\", this.handleScroll);\n  }\n  componentWillUnmount(): void {\n    window.removeEventListener(\"scroll\", this.handleScroll);\n  }\n\n  render(): ReactElement {\n    const { visibilityClass } = this.state;\n    return (\n      <Translation>\n        {(t) => (\n          <Scroll type=\"class\" element=\"page-top\" offset={100}>\n            <a\n              title={t(\"Go to top of page\")}\n              className={`scroll-to-top rounded ${visibilityClass}`}\n              href=\"#page-top\"\n            >\n              <FontAwesomeIcon icon={faAngleUp} />\n            </a>\n          </Scroll>\n        )}\n      </Translation>\n    );\n  }\n}\n","import { faMapSigns, faSitemap, faUsers } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { useTranslation } from \"gatsby-plugin-react-i18next\";\nimport React, { ReactElement } from \"react\";\n\nconst Services = (): ReactElement => {\n  const { t } = useTranslation();\n  return (\n    <section className=\"content-section bg-primary text-white text-center\" id=\"services\">\n      <div className=\"container\">\n        <div className=\"content-section-heading\">\n          <h3 className=\"text-secondary mb-5\">{t(\"Services & missions\")}</h3>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-lg-4 col-md-6 mb-5 mb-lg-0\">\n            <span className=\"service-icon rounded-circle mx-auto mb-3\">\n              <FontAwesomeIcon icon={faMapSigns} />\n            </span>\n            <h4 className=\"text-secondary text-bold\">{t(\"CTO at your service\")}</h4>\n            <p className=\"text-white mb-0\">\n              ✓ {t(\"Digital transformation\")}\n              <br />✓ {t(\"Mentoring of startups\")}\n              <br />✓ {t(\"IT Audit & Organization to achieve operational efficiency\")}\n              <br />✓ {t(\"Hiring & development of technical teams\")}\n            </p>\n          </div>\n          <div className=\"col-lg-4 col-md-6 mb-5 mb-lg-0\">\n            <span className=\"service-icon rounded-circle mx-auto mb-3\">\n              <FontAwesomeIcon icon={faSitemap} />\n              <i className=\"icon-organization\"></i>\n            </span>\n            <h4 className=\"text-secondary text-bold\">{t(\"Web / Cloud architecte\")}</h4>\n            <p className=\"text-white mb-0\">\n              ✓{\" \"}\n              {t(\n                \"Architecture of your project to have a secure, modern, agile, high-performance technical solution that is consistent with your vision\"\n              )}\n              <br />✓ {t(\"Definition of standards and ensuring consistency of implementation\")}\n              <br />✓ {t(\"Description of good practices and checking their application\")}\n              <br />✓{\" \"}\n              {t(\"Implementation of P.O.C. in order to test and validate a new technical solution\")}\n              <br />✓ {t(\"Providing technical expertise and support to technical teams\")}\n            </p>\n          </div>\n          <div className=\"col-lg-4 col-md-6 mb-5 mb-md-0\">\n            <span className=\"service-icon rounded-circle mx-auto mb-3\">\n              <FontAwesomeIcon icon={faUsers} />\n            </span>\n            <h4 className=\"text-secondary text-bold\">{t(\"Lead developer Nodejs / PHP\")}</h4>\n            <p className=\"text-white mb-0\">\n              ✓ {t(\"Support of a technical team for the success of the project\")}\n              <br />✓{\" \"}\n              {t(\n                \"Bridge and guarantee of the good communication between the actors of the project\"\n              )}\n              <br />✓ {t(\"Ensures code quality and best practices (craftmanship)\")}\n              <br />✓ {t(\"Technical watch and continuous improvement proposal\")}\n            </p>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default Services;\n","import { graphql } from \"gatsby\";\nimport React, { ReactElement } from \"react\";\n\nimport About from \"../components/about/About\";\nimport Contact from \"../components/contact/Contact\";\nimport Footer from \"../components/footer/Footer\";\nimport Layout from \"../components/layout/Layout\";\nimport Masthead from \"../components/masthead/Masthead\";\nimport OpenSource from \"../components/open-source/OpenSource\";\nimport Portfolio from \"../components/portfolio/Portfolio\";\nimport ScrollToTop from \"../components/scroll-to-top/ScrollToTop\";\nimport Services from \"../components/services/Services\";\n\nexport default function IndexPage(): ReactElement {\n  return (\n    <Layout>\n      <Masthead />\n      <About />\n      <Services />\n      <Contact />\n      <Portfolio />\n      <OpenSource />\n      <ScrollToTop />\n      <Footer />\n    </Layout>\n  );\n}\n\nexport const query = graphql`\n  query($language: String!) {\n    locales: allLocale(filter: { language: { eq: $language } }) {\n      edges {\n        node {\n          ns\n          data\n          language\n        }\n      }\n    }\n  }\n`;\n"],"names":["camelCase","input","options","Array","isArray","TypeError","Object","assign","pascalCase","x","map","trim","filter","length","join","toUpperCase","toLowerCase","string","isLastCharLower","isLastCharUpper","isLastLastCharUpper","i","character","test","slice","preserveCamelCase","replace","_","p1","m","charAt","module","exports","height","prototype","node","images","_node$images","fallback","_node$images$fallback","src","Boolean","gatsbyImageData","gatsbyImage","childImageSharp","_node$childImageSharp","format","isLoading","isLoaded","loading","style","shouldLoad","opacity","placeholder","layout","width","backgroundColor","objectFit","objectPosition","wrapperStyle","position","top","left","bottom","right","transition","sources","fallbackImage","paddingTop","maxWidth","display","React","alt","role","children","props","Fragment","Sizer","q","P","H","srcSet","decoding","undefined","t","sizes","Image","media","type","key","propTypes","PropTypes","Picture","displayName","isRequired","e","Placeholder","_Picture$propTypes","propName","componentName","MainImage","rest","image","altValidator","Set","onError","as","className","preactClass","class","onStartLoad","onLoad","overflow","getWrapperProps","wStyle","wClass","wrapperProps","useRef","useMemo","JSON","stringify","sizer","getSizer","useEffect","renderImageToStringPromise","import","then","renderImageToString","swapPlaceholderImage","renderImage","root","current","querySelector","ssrImage","hasNativeLazyLoadSupport","complete","wasCached","setTimeout","removeAttribute","addEventListener","removeEventListener","onLoadListener","imageCache","add","cacheKey","has","innerHTML","animationFrame","requestAnimationFrame","cleanupCallback","cancelAnimationFrame","useLayoutEffect","ref","dangerouslySetInnerHTML","__html","suppressHydrationWarning","ae","memo","warn","GatsbyImageHydrator","GatsbyImage","se","checkDimensionProps","validLayouts","Error","GatsbyImageBrowser","__error","imageData","__imageData","console","StaticImage","useSocialLinks","useTranslation","icon","faGithub","name","url","faLinkedin","title","SkillItemRender","label","items","item","index","skillItems","useSkillItems","skill","isFontAwesomeIcon","FontAwesomeIcon","socialLinks","id","social","href","rel","target","SocialIcon","Skills","Scroll","element","offset","ContactForm","action","method","htmlFor","required","Footer","originalPath","useI18next","Date","getFullYear","Link","to","language","aspectRatio","i18n","githubStatsUrl","URL","searchParams","append","toString","PortfolioItemRender","subtitle","imageFile","content","getImage","line","portfolioItems","files","useStaticQuery","allFile","nodes","find","file","relativePath","usePortfolioItems","ScrollToTop","_this","handleScroll","visibilityClass","state","window","pageYOffset","setState","componentDidMount","this","componentWillUnmount","render","Translation","faAngleUp","Component","faMapSigns","faSitemap","faUsers","IndexPage","Layout","Masthead","About","Services","Contact","Portfolio","OpenSource"],"sourceRoot":""}